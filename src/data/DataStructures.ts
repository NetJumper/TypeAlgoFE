// src/data/DataStructures.ts
type DataStructuresType = {
    [key: string]: string[];
  };
  
  export const dataStructures: DataStructuresType = {
    linkedList: [
      "class Node:",
      "    def __init__(self, value):",
      "        self.value = value",
      "        self.next = None",
      "",
      "class LinkedList:",
      "    def __init__(self, value):",
      "        new_node = Node(value)",
      "        self.head = new_node",
      "        self.tail = new_node",
      "        self.length = 1",
      "",
      "    def print_list(self):",
      "        temp = self.head",
      "        while temp is not None:",
      "            print(temp.value)",
      "            temp = temp.next",
      "",
      "    def append(self, value):",
      "        new_node = Node(value)",
      "        if self.length == 0:",
      "            self.head = new_node",
      "            self.tail = new_node",
      "        else:",
      "            self.tail.next = new_node",
      "            self.tail = new_node",
      "        self.length += 1",
      "",
      "    def pop(self):",
      "        if self.length == 0:",
      "            return None",
      "        temp = self.head",
      "        pre = self.head",
      "        while temp.next:",
      "            pre = temp",
      "            temp = temp.next",
      "        self.tail = pre",
      "        self.tail.next = None",
      "        self.length -= 1",
      "        if self.length == 0:",
      "            self.head = None",
      "            self.tail = None",
      "        return temp.value",
      "",
    ],
  
    HashTable: [
      "class HashTable:",
      "    def __init__(self, size = 7):",
      "        self.data_map = [None] * size",
      "",
      "    def __hash(self, key):",
      "        my_hash = 0",
      "        for letter in key:",
      "            my_hash = (my_hash + ord(letter) * 23) % len(self.data_map)",
      "        return my_hash",
      "",
      "    def print_table(self):",
      "        for i, val in enumerate(self.data_map):",
      "            print(i, ': ', val)",
      "",
      "    def set_item(self, key, value):",
      "        index = self.__hash(key)",
      "        if self.data_map[index] == None:",
      "            self.data_map[index] = []",
      "        self.data_map[index].append([key, value])",
      "",
      "    def get_item(self, key):",
      "        index = self.__hash(key)",
      "        if self.data_map[index] is not None:",
      "            for i in range(len(self.data_map[index])):",
      "                if self.data_map[index][i][0] == key:",
      "                    return self.data_map[index][i][1]",
      "        return None",
    ],
  };
  